---
version: 0.2
phases:
  install:
    commands:
      - curl ... aws-iam-authenticator
      - curl ... kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - apt-get update && apt-get -y install jq python3-pip python3-dev && pip3 install --upgrade awscli
  pre_build:
      commands:
        - echo "Fetching latest image tags from ECR..."
        - TAGS=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*].imageTag' --output text | tr '\t' '\n' | grep '^v[0-9]*$' | sed 's/v//' | sort -n)
        - echo "Existing tags: $TAGS"
        - LAST_TAG=$(echo "$TAGS" | tail -n 1)
        - NEXT_TAG=$((LAST_TAG + 1))
        - TAG="v${NEXT_TAG}"
        - echo "Generated TAG: $TAG"
        - echo "ECR URI: $REPOSITORY_URI"
        - echo "$REPOSITORY_URI:$TAG"
        - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' hello-k8s.yml
        - $(aws ecr get-login --no-include-email)
        - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - docker build -t $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - docker push $REPOSITORY_URI:$TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl apply -f hello-k8s.yml
      - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files: build.json